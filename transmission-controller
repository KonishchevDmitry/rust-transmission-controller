#!/opt/venv/bin/python
#
# requirements.txt: pymongo transmissionrpc pcore psys pcli

"""Controls transmission daemon to save user from routine operations."""

import argparse
import errno
import getpass
import html
import json
import logging
import os
import re
import shutil
import smtplib
import subprocess
import time

from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

import pymongo

import transmissionrpc.client
import transmissionrpc.error

from pcore import constants

import psys
import psys.daemon
from psys import eintr_retry

import pcli.log

LOG = logging.getLogger("transmission-controller")


USER = getpass.getuser()
"""User the script is run under."""

SETTINGS = None
"""Transmission configuration file settings."""

TRANSMISSION = None
"""Transmission client connection."""

MONGODB = pymongo.MongoClient()
"""MongoDB connection."""


class Error(Exception):
    """The base class for all exceptions the module raises."""

    def __init__(self, *args, **kwargs):
        super(Error, self).__init__(args[0].format(*args[1:], **kwargs))


#def check_free_space(download_dir):
#    """Checks whether we have enough free space on the disk."""
#
#    if SETTINGS.get("free-space-threshold", -1) < 0:
#        return True
#
#    # df gives a different output for "dir" and "dir/"
#    download_dir += "/"
#
#    process = subprocess.Popen([ "df", download_dir ],
#        stdout = subprocess.PIPE, stderr = subprocess.PIPE)
#
#    stdout, stderr = process.communicate()
#    stdout = psys.u(stdout)
#    stderr = psys.u(stderr)
#
#    if process.returncode:
#        raise Error("df returned an error for {}: {}.",
#            download_dir, stderr.replace("\n", " ").strip())
#
#    stat = re.sub(r" +", " ", stdout.split("\n")[1]).split(" ")
#    device = stat[0]
#    usage = stat[4]
#    free_space = 100 - int(re.match(r"^(\d+)%$", usage).group(1))
#
#    if free_space <= SETTINGS["free-space-threshold"]:
#        LOG.info("We don't have enough free space on %s: %s%% vs %s%%.",
#            device, free_space, SETTINGS["free-space-threshold"])
#        return False
#    else:
#        return True


def cleanup_fs(torrents):
    """Removes seeding torrents if free space on the disk is too small."""

    try:
        download_dir = os.path.normpath(os.path.expanduser(SETTINGS["download-dir"]))

        torrents = sorted(
            ( torrent for torrent in torrents if os.path.normpath(torrent.downloadDir) == download_dir ),
            key = lambda torrent: torrent.doneDate)

        if torrents and not check_free_space(download_dir):
            for torrent in torrents:
                LOG.info("Removing torrent %s to get a free space on the disk...", torrent.name)
                remove_torrent(torrent)

                if check_free_space(download_dir):
                    break
    except Exception as e:
        LOG.error("Failed to cleanup the file system: %s", e)


def control_transmission(action = None):
    """Controls the Transmission."""

    torrents = TRANSMISSION.info().values()
    remove_old_db_torrents(torrents)

    removable_torrents = []

    for torrent in torrents:
        #status = torrent.status
        #LOG.debug("Checking torrent %s (%s)...", torrent.name, status)
        #
        #if action == "start" and status == "stopped":
        #    LOG.info("Starting torrent %s...", torrent.name)
        #    TRANSMISSION.start(torrent.hashString)
        #    status = "seeding" if torrent.doneDate else "downloading"
        #elif action == "stop" and status != "stopped":
        #    LOG.info("Stopping torrent %s...", torrent.name)
        #    TRANSMISSION.stop(torrent.hashString)
        #    status = "stopped"
        #
        #if SETTINGS.get("max-announce-interval", 0) > 0 and status != "stopped":
        #    last_announce = 0
        #    for tracker_stats in torrent.trackerStats:
        #        if tracker_stats["lastAnnounceTime"] > last_announce:
        #            last_announce = tracker_stats["lastAnnounceTime"]
        #
        #    if time.time() >= last_announce + SETTINGS["max-announce-interval"] * constants.MINUTE_SECONDS:
        #        # Notice: doesn't work without patching transmission if tracker
        #        # sends its own min announce interval
        #        LOG.debug("Reannouncing torrent %s...", torrent.name)
        #        TRANSMISSION.reannounce(torrent.hashString)

        if torrent.doneDate:
            torrent_downloaded(torrent)

            if (
                SETTINGS.get("max-seed-time", -1) >= 0 and
                time.time() - torrent.doneDate >= SETTINGS["max-seed-time"]
            ):
                LOG.info("Torrent %s has seeded enough time to delete it. Deleting it...", torrent.name)
                remove_torrent(torrent)
            else:
                removable_torrents.append(torrent)

    move_copied_torrents()
    cleanup_fs(removable_torrents)


def copy_torrent(torrent, destination):
    """Copies the specified torrent to the "copy to" dir."""

    LOG.info("Copying torrent %s to %s:", torrent.name, destination)

    for torrent_file in torrent.files().values():
        if not torrent_file["selected"]:
            continue

        path = os.path.normpath(torrent_file["name"]).strip("/")
        LOG.debug("Copying file %s...", path)

        try:
            os.makedirs(os.path.join(destination, os.path.dirname(path)), 0o777)
        except EnvironmentError as e:
            if e.errno != errno.EEXIST:
                raise e

        fd = eintr_retry(os.open)(os.path.join(destination, path),
                os.O_CREAT | os.O_EXCL | os.O_WRONLY, 0o666)

        try:
            shutil.copyfile(
                os.path.join(torrent.downloadDir, path),
                os.path.join(destination, path))
        finally:
            eintr_retry(os.close)(fd)


def db():
    """Returns the database connection."""

    return MONGODB["transmission-controller-" + USER]


def get_db_torrent(torrent):
    """Returns torrent info from the database."""

    uuid = get_torrent_uuid(torrent)

    torrent_info = torrent_coll().find_one({ "_id": uuid })

    if torrent_info is None:
        torrent_info = {
            "_id":    uuid,
            "name":   torrent.name,
            "copied": False,
        }

    return torrent_info


def get_torrent_uuid(torrent):
    """Returns UUID of the specified torrent."""

    return "{0}:{1}".format(torrent.hashString, torrent.addedDate)


def main():
    """The script's main function."""

    # Parsing command line arguments -->
    parser = argparse.ArgumentParser(
        description ="Controls transmission daemon to save user from routine operations")

    parser.add_argument("--cron", action = "store_true", help = "cron mode")
    parser.add_argument("--debug", action = "store_true", help = "debug mode")

    group = parser.add_mutually_exclusive_group()
    group.add_argument("--start-all", action = "store_true", help = "start all torrents")
    group.add_argument("--stop-all", action = "store_true", help = "stop all torrents")

    args = parser.parse_args()
    # Parsing command line arguments <--

    if args.debug:
        pcli.log.setup(debug_mode = True)
    else:
        pcli.log.setup(level = logging.ERROR if args.cron else None)


    pid_file = "/var/run/lock/transmission-controller-" + USER

    try:
        pid_file_fd = psys.daemon.acquire_pidfile(pid_file)
    except psys.daemon.PidFileLockedError as e:
        if args.cron:
            LOG.debug("Exiting: %s", e)
        else:
            raise
    else:
        try:
            global SETTINGS
            with open(os.path.expanduser("~/.config/transmission-daemon/settings.json"), "r") as config:
                SETTINGS = json.load(config)

            os.umask(SETTINGS["umask"])

            global TRANSMISSION
            TRANSMISSION = transmissionrpc.client.Client(
                address = "http://localhost:{}/{}/rpc".format(SETTINGS["rpc-port"], SETTINGS["rpc-url"].strip("/")),
                user = SETTINGS["rpc-username"], password = SETTINGS["rpc-plain-password"],
                timeout = constants.MINUTE_SECONDS)

            action = None
            if not TRANSMISSION.get_session().alt_speed_enabled:
                if args.start_all:
                    action = "start"
                elif args.stop_all:
                    action = "stop"

            control_transmission(action)
        except transmissionrpc.error.TransmissionError as e:
            # Ignore all Transmission errors because it crashes too frequently
            LOG.warning("Transmission error: %s", e)
        finally:
            eintr_retry(os.close)(pid_file_fd)
            eintr_retry(os.unlink)(pid_file)


def move_copied_torrents():
    """Moves all copied torrents to the specified directory."""

    copy_to = os.path.expanduser(SETTINGS.get("copy-to-dir", ""))
    move_to = os.path.expanduser(SETTINGS.get("move-copied-to-dir", ""))

    if not copy_to or not move_to:
        return

    for item in os.listdir(copy_to):
        item_path = os.path.join(copy_to, item)

        LOG.info("Moving %s to %s...", item_path, move_to if move_to.endswith("/") else move_to + "/")

        for dup_id in range(0, 10):
            if dup_id:
                dest_item_path = os.path.join(move_to, "DUP_{0}.{1}".format(dup_id, item))
            else:
                dest_item_path = os.path.join(move_to, item)

            try:
                os.stat(dest_item_path)
            except EnvironmentError as e:
                if e.errno == errno.ENOENT:
                    break
                else:
                    raise
        else:
            raise Error("Logical error.")

        os.rename(item_path, dest_item_path)


def remove_old_db_torrents(torrents):
    """Removes all unexisting torrents from the database."""

    torrent_coll().remove(
        { "_id": { "$nin": [ get_torrent_uuid(torrent) for torrent in torrents ] } })


def remove_torrent(torrent):
    """Removes the specified torrent."""

    TRANSMISSION.remove(torrent.hashString, delete_data = True)


def save_db_torrent(db_torrent):
    """Saves the torrent info to the database."""

    torrent_coll().save(db_torrent)


def send_mail(torrent, mail_to, mail_from, mail_password, mail_via):
    """Sends a email to user."""

    msg = MIMEMultipart("alternative")
    msg["Subject"] = "Новые файлики ({})".format(torrent.name)
    msg["From"] = "Сервачок"
    msg["To"] = mail_to

    msg_text = "Привет!\n\nА я тебе скачал {}.\n\nТвой Сервачок.".format(torrent.name)
    msg.attach(MIMEText(msg_text, "plain"))

    msg_html = """
        <html>
            <body>
                <p style='margin-top: 0px'>Привет!<p>
                <p>А я тебе скачал <b>{}</b>.</p>
                <p style='margin-bottom: 0px'>Твой Сервачок.</p>
            </body>
        </html>
    """.format(html.escape(torrent.name))
    msg.attach(MIMEText(msg_html, "html"))

    server = smtplib.SMTP(mail_via)
    server.starttls()
    server.login(mail_from, mail_password)
    server.sendmail(mail_from, mail_to, msg.as_string())
    server.quit()


def torrent_coll():
    """Returns collection with torrent info."""

    return db()["torrents"]


def torrent_downloaded(torrent):
    """Called when torrent finished downloading."""

    db_torrent = get_db_torrent(torrent)

    if not db_torrent["copied"]:
        copy_to = os.path.expanduser(SETTINGS.get("copy-to-dir", ""))

        if SETTINGS.get("copy-tv-shows-to-dir"):
            # Check whether this is a TV show
            match = re.match(r"(.+)[._](?:s\d+e\d+|\d+x\d+)[._]", torrent.name, re.IGNORECASE)

            if match is not None:
                # Get the TV show name from the different file naming formats
                tv_show_name = match.group(1).replace(".", " ").replace("_", " ").strip().title()
                tv_show_name = re.sub(r"\s+", " ", tv_show_name)

                # Some releasers add year to the file name
                match = re.match(r"(.+) \d+", tv_show_name)
                if match is not None:
                    tv_show_name = match.group(1)

                if tv_show_name.lower() in ( name.strip().lower() for name in SETTINGS.get("copy-tv-shows", "").split(",") if name.strip() ):
                    copy_to = os.path.join(
                        os.path.expanduser(SETTINGS["copy-tv-shows-to-dir"]), tv_show_name)

                    try:
                        os.mkdir(copy_to, 0o777)
                    except EnvironmentError as e:
                        if e.errno != errno.EEXIST:
                            raise e
        if copy_to:
            copy_torrent(torrent, copy_to)
            db_torrent["copied"] = True
            save_db_torrent(db_torrent)

    if (
        not db_torrent.get("mailed") and SETTINGS.get("mail-to") and
        SETTINGS.get("mail-from") and SETTINGS.get("mail-password") and
        SETTINGS.get("mail-via")
    ):
        try:
            send_mail(
                torrent, SETTINGS["mail-to"], SETTINGS["mail-from"],
                SETTINGS["mail-password"], SETTINGS["mail-via"])
        except Exception as e:
            LOG.error("Failed to send a email: %s", e)
        else:
            db_torrent["mailed"] = True
            save_db_torrent(db_torrent)


if __name__ == "__main__":
    main()
